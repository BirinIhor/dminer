#!/usr/bin/python
import argparse, os, logging
import dminer

logger = logging.getLogger("dminer")

formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler = logging.StreamHandler()
handler.setFormatter(formatter)
logger.addHandler(handler)

sink_interfaces = {
	'all': {
        'class': dminer.sinks.ScrapeAll,
        'credentials_required': True
    },
	'alphabay': {
        'class': dminer.sinks.AlphabayScraper,
        'credentials_required': True
    },
	'dreammarket': {
        'class': dminer.sinks.DreammarketScraper,
        'credentials_required': True
    }
}
sink_interfaces_str = ",".join(sink_interfaces.keys())

ingestion_interfaces = {
	'alphabay': dminer.ingestion.AlphabayParser,
	'dreammarket': dminer.ingestion.DreammarketParser
}
ingestion_interfaces_str = ",".join(ingestion_interfaces.keys())

datastore_interfaces = {
	'elasticsearch': dminer.stores.ESDataStore
}
datastore_interfaces_str = ",".join(ingestion_interfaces.keys())

datastore_configuration_interfaces = {
	'elasticsearch': {
		'alphabay': dminer.stores.configuration.AlphabayConfiguration,
		'dreammarket': dminer.stores.configuration.DreammarketConfiguration
	}
}
datastore_actions = [
	'create', 'destroy'
]
datastore_actions_str  = ",".join(datastore_actions)




verbosity_options = [
	"INFO", "ERROR", "DEBUG"
]
verbosity_options_str = ",".join(verbosity_options)

def scrape(arguments):
	# Set logging settings
	logger.setLevel(arguments.verbosity.upper())
	# Error on fatals
	assert arguments.sink_interface in sink_interfaces, "Sink interface %s not found." % arguments.sink_interface
	# Set up credential parsing
	username = arguments.username if arguments.username \
	                              else os.environ.get("DMINER_%s_USERNAME" % arguments.sink_interface.upper(), None)
	password = arguments.password if arguments.password \
	                              else os.environ.get("DMINER_%s_PASSWORD" % arguments.sink_interface.upper(), None)

	# Verify that credentails are found
	if sink_interfaces[arguments.sink_interface]['credentials_required']:
	    assert username, "You must provide a username for this interface."
	    assert password, "You must provide a password for this interface."

	# Set up the datastore interface if we are going to persist to it.
	# Otherwise don't use it.
	assert arguments.datastore_interface in datastore_interfaces, "Datastore interface %s not found." % arguments.datastore_interface
	datastore_interface = datastore_interfaces[arguments.datastore_interface](
	    host=arguments.datastore_host,
	    port=arguments.datastore_port
	) if not arguments.no_datastore else None
	# We also need to set up the ingestion interface for parsing and putting
	# it into the datastore. Since the ingestion interface should be named
	# the same as the sink, we just re-use the sink_interface name.
	ingestion_interface = ingestion_interfaces[arguments.sink_interface](
	    datastore=datastore_interface
	) if not arguments.no_datastore else None


	sink_interface = sink_interfaces[arguments.sink_interface]['class']()
	results = sink_interface.scrape(
	    username=username,
	    password=password,
	    save_directory=arguments.save_to_directory,
		url_file=arguments.url_file
	)
	if not arguments.no_datastore:
		ingestion_interface.parse(scrape_results=results)
	else:
		list(results)

def ingest(arguments):
	# Set logging settings
	logger.setLevel(arguments.verbosity.upper())
	# Error on fatals
	assert arguments.ingestion_interface in ingestion_interfaces, "Ingestion interface %s not found" % arguments.ignestion_interface
	assert arguments.directory, "You must provide a directory to ingest."

	# Set up the datastore interface so that we can persist the parsed results.
	assert arguments.datastore_interface in datastore_interfaces, "Datastore interface %s not found" % arguments.datastore_interface
	datastore_interface = datastore_interfaces[arguments.datastore_interface](
		host=arguments.datastore_host,
		port=arguments.datastore_port
	)

	# Set up the ingestion interface
	ingestion_interface = ingestion_interfaces[arguments.ingestion_interface](
		datastore=datastore_interface
	)
	# Ingest the directory
	ingestion_interface.parse(
		directory=arguments.directory
	)

def datastore(arguments):
	assert arguments.action in datastore_actions, "The action %s is not available." % arguments.action
	assert arguments.datastore in datastore_configuration_interfaces, "The datastore %s does not have a configuration interface." % arguments.datastore

	configuration_interfaces = datastore_configuration_interfaces[arguments.datastore]
	# Begin calling the actions on the datastore
	for interface_name, interface_class in configuration_interfaces.iteritems():
		# Creates a new instance of the datastore
		config_interface = interface_class(
			datastore_host=arguments.datastore_host,
			datastore_port=arguments.datastore_port
		)
		# Gets the function action for the specified backend and executes it
		execution_function = "_{action}_{datastore}".format(
			action=arguments.action,
			datastore=arguments.datastore
		)
		try:
			function = getattr(config_interface, execution_function)
		except AttributeError:
			raise NotImplementedError("The function %s has not been implemented." % execution_function)
		# Call outside of scope to allow for errors inside of the function definition
		# to be raised/handled normally
		function()


if __name__ == '__main__':
	parser = argparse.ArgumentParser()
	subparsers = parser.add_subparsers()

	scrape_args = subparsers.add_parser("scrape")
	scrape_args.add_argument(
	    "sink_interface",
	    type=str, default="all",
	    help="""
	    The sink used to scrape. The available interfaces are:

	    %s
	    """ % sink_interfaces_str
	)
	# Credential parsing for the actual marketplaces
	scrape_args.add_argument(
	    "--username",
	    default=None,
	    help="""
	    The username to use when logging into a market.
	    """
	)
	scrape_args.add_argument(
	    "--password",
	    default=None,
	    help="""
	    The password to use when logging into a market.
	    """
	)
	# Configuration for scraping from file of URLS
	scrape_args.add_argument(
	    "--url-file",
	    default=None,
	    help="""
	    Specify a file containing URLs to scrape.
	    """
	)
	# Datastore configuraiton options
	scrape_args.add_argument(
	    "--datastore-interface",
	    type=str, default="elasticsearch",
	    help="""
	    The datastore interface to use. The available interfaces are:

	    %s
	    """ % datastore_interfaces_str
	)
	scrape_args.add_argument(
	    "--datastore-host",
	    type=str, default="localhost",
	    help="""
	    The host of the datastore.
	    """
	)
	scrape_args.add_argument(
	    "--datastore-port",
	    type=int, default=9200,
	    help="""
	    The port the datastore is listening on.
	    """
	)
	# Saving options
	scrape_args.add_argument(
	    "--no-datastore",
	    action="store_true",
	    help="""
	    Disable the parsing and ingestion of scrapes into the datastore.
	    """
	)
	scrape_args.add_argument(
	    "--save-to-directory",
	    default=None,
	    help="""
	    Save the scrapes to a directory.
	    """
	)
	# Verbosity options
	scrape_args.add_argument(
		"--verbosity",
		type=str, default="INFO",
		help="""
		Control the verbosity of dminer. Available options are:

		%s
		""" % verbosity_options_str
	)
	scrape_args.set_defaults(func=scrape)



	ingest_args = subparsers.add_parser("ingest")
	ingest_args.add_argument(
	    "ingestion_interface",
	    default=None,
	    help="""
	    The ingestion interface to use. The available ingestion interfaces are:

	    %s
	    """ % ingestion_interfaces_str
	)
	ingest_args.add_argument(
	    "directory",
	    default=None,
	    help="""
	    The directory to fetch scrapes from.
	    """
	)
	# Grab datastore settings
	ingest_args.add_argument(
	    "--datastore-interface",
	    type=str, default="elasticsearch",
	    help="""
	    The datastore interface to use. The avialable interfaces are:

	    %s
	    """ % datastore_interfaces_str
	)
	ingest_args.add_argument(
	    "--datastore-host",
	    type=str, default="localhost",
	    help="""
	    The host of the datastore.
	    """
	)
	ingest_args.add_argument(
	    "--datastore-port",
	    type=int, default=9200,
	    help="""
	    The port the datastore is listening on.
	    """
	)
	# Verbosity options
	ingest_args.add_argument(
		"--verbosity",
		type=str, default="INFO",
		help="""
		Control the verbosity of dminer. Available options are:

		%s
		""" % verbosity_options_str
	)
	ingest_args.set_defaults(func=ingest)



	datastore_args = subparsers.add_parser("datastore")
	datastore_args.add_argument(
	    "action",
	    default=None,
	    help="""
	    The action to perform on the datastore. The available acitons are:

	    %s
	    """ % datastore_actions_str
	)
	datastore_args.add_argument(
		"datastore",
		default="elasticsearch",
		help="""
		The datastore backend to perform the action on.
		"""
	)
	datastore_args.add_argument(
		"--datastore-host",
		type=str, default="localhost",
		help="""
		The host of the datastore.
		"""
	)
	datastore_args.add_argument(
		"--datastore-port",
		type=int, default=9200,
		help="""
		The port the datastore is listening on.
		"""
	)
	datastore_args.set_defaults(func=datastore)

	args = parser.parse_args()
	args.func(args)
